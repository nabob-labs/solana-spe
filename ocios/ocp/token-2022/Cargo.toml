[package]
name = "spl-token-2022"
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[package.metadata.solana]
program-id = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"

[lib]
name = "spl_token_2022"
crate-type = [
    "cdylib",
    "lib",
]
path = "src/lib.rs"

[[test]]
name = "action"
path = "tests/action.rs"

[[test]]
name = "assert_instruction_count"
path = "tests/assert_instruction_count.rs"

[[test]]
name = "serialization"
path = "tests/serialization.rs"

[dependencies]
arrayref = "0.3.9"
base64 = { version = "0.22.1", optional = true }
bytemuck = { version = "1.21.0", features = ["derive"] }
num-derive = "0.4"
num-traits = "0.2"
num_enum = "0.7.3"
serde = { version = "1.0.217", optional = true }
serde_with = { version = "3.12.0", optional = true }
solana-program = { workspace = true }
solana-security-txt = { workspace = true }
solana-zk-sdk = { workspace = true }
spl-elgamal-registry = { workspace = true, features = ["no-entrypoint"] }
spl-memo = { workspace = true, features = ["no-entrypoint"] }
spl-pod = { workspace = true }
spl-token = { workspace = true, features = ["no-entrypoint"] }
spl-token-confidential-transfer-ciphertext-arithmetic =  { workspace = true }
spl-token-confidential-transfer-proof-extraction = { workspace = true }
spl-token-group-interface = { workspace = true }
spl-token-metadata-interface = { workspace = true }
spl-transfer-hook-interface = { workspace = true }
spl-type-length-value = { workspace = true }
thiserror = "2.0"

[dev-dependencies]
lazy_static = "1.5.0"
proptest = "1.6"
serde_json = "1.0.135"
serial_test = "3.2.0"
#solana-program-test = { workspace = true }
solana-sdk = { workspace = true }
spl-tlv-account-resolution = { workspace = true }

[features]
default = ["zk-ops"]
no-entrypoint = []
serde-traits = [
    "dep:serde",
    "dep:serde_with",
    "dep:base64",
    "spl-pod/serde-traits",
]
test-sbf = []
zk-ops = []

[target.'cfg(not(target_os = "solana"))'.dependencies]
spl-token-confidential-transfer-proof-generation = { workspace = true }

[lints.rust.unexpected_cfgs]
level = "warn"
priority = 0
check-cfg = [
    'cfg(target_os, values("solana"))',
    'cfg(feature, values("frozen-abi", "no-entrypoint"))',
]
