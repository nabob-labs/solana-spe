[package]
name = "solana-message"
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg=docsrs"]
targets = [
    "x86_64-unknown-linux-gnu",
    "wasm32-unknown-unknown",
]

[lib]
name = "solana_message"
path = "src/lib.rs"

[dependencies]
bincode = { workspace = true, optional = true }
blake3 = { workspace = true, features = ["traits-preview"], optional = true }
lazy_static = { workspace = true }
serde = { workspace = true, optional = true }
serde_derive = { workspace = true, optional = true }
solana-bincode = { workspace = true, optional = true }
solana-frozen-abi = { workspace = true, optional = true }
solana-frozen-abi-macro = { workspace = true, optional = true }
solana-hash = { workspace = true }
solana-instruction = { workspace = true, features = ["std"] }
solana-logger = { workspace = true, optional = true }
solana-pubkey = { workspace = true }
solana-sanitize = { workspace = true }
solana-sdk-ids = { workspace = true }
solana-short-vec = { workspace = true, optional = true }
solana-system-interface = { workspace = true, optional = true, features = [
    "bincode",
] }
solana-transaction-error = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { workspace = true }

[dev-dependencies]
anyhow = { workspace = true }
bitflags = { workspace = true }
borsh = { workspace = true }
itertools = { workspace = true }
serde_json = { workspace = true }
#solana-message = { path = ".", features = ["dev-context-only-utils"] }
solana-nonce = { workspace = true }
#solana-program = { path = "../program" }
solana-sha256-hasher = { workspace = true }
solana-sysvar = { workspace = true }
static_assertions = { workspace = true }

[features]
bincode = [
    "dep:bincode",
    "dep:solana-bincode",
    "dep:solana-system-interface",
    "serde",
]
blake3 = ["dep:blake3"]
dev-context-only-utils = [
    "bincode",
    "blake3",
]
frozen-abi = [
    "dep:solana-frozen-abi",
    "dep:solana-frozen-abi-macro",
    "dep:solana-logger",
    "solana-hash/frozen-abi",
    "solana-pubkey/frozen-abi",
]
serde = [
    "dep:serde",
    "dep:serde_derive",
    "dep:solana-short-vec",
    "solana-hash/serde",
    "solana-pubkey/serde",
]

[lints.rust.unexpected_cfgs]
level = "warn"
priority = 0
check-cfg = [
    'cfg(target_os, values("solana"))',
    'cfg(feature, values("frozen-abi", "no-entrypoint"))',
]
