[package]
name = "solana-sdk"
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg=docsrs"]
targets = [
    "x86_64-unknown-linux-gnu",
    "wasm32-unknown-unknown",
]

[lib]
name = "solana_sdk"
crate-type = [
    "cdylib",
    "rlib",
]
path = "src/lib.rs"

[[test]]
name = "test_pubkey_export"
path = "tests/test_pubkey_export.rs"

[[bench]]
name = "accounts"
path = "benches/accounts.rs"

[[bench]]
name = "big_mod_exp"
path = "benches/big_mod_exp.rs"

[[bench]]
name = "ed25519_instructions"
path = "benches/ed25519_instructions.rs"

[[bench]]
name = "secp256k1_instructions"
path = "benches/secp256k1_instructions.rs"

[[bench]]
name = "secp256r1_instructions"
path = "benches/secp256r1_instructions.rs"

[[bench]]
name = "serialize_instructions"
path = "benches/serialize_instructions.rs"

[[bench]]
name = "short_vec"
path = "benches/short_vec.rs"

[[bench]]
name = "slot_hashes"
path = "benches/slot_hashes.rs"

[[bench]]
name = "slot_history"
path = "benches/slot_history.rs"

[dependencies]
bincode = { workspace = true }
bs58 = { workspace = true, default-features = false }
serde = { workspace = true }
serde_json = { workspace = true,optional = true }
solana-account = { workspace = true, features = ["bincode"] }
solana-bn254 = { workspace = true }
solana-client-traits = { workspace = true, optional = true }
solana-cluster-type = { workspace = true, features = ["serde"], optional = true }
solana-commitment-config = { workspace = true, features = ["serde"], optional = true }
solana-compute-budget-interface = { workspace = true, features = ["serde"], optional = true }
solana-decode-error = { workspace = true }
solana-derivation-path = { workspace = true }
solana-ed25519-program = { workspace = true, optional = true }
solana-epoch-info= { workspace = true, features = ["serde"] }
solana-epoch-rewards-hasher = { workspace = true }
solana-feature-set = { workspace = true }
solana-fee-structure = { workspace = true, features = ["serde"] }
solana-genesis-config = { workspace = true, features = ["serde"], optional = true }
solana-hard-forks = { workspace = true, features = ["serde"], optional = true ,default-features = false }
solana-inflation = { workspace = true, features = ["serde"] }
solana-instruction = { workspace = true, default-features = false }
solana-keypair = { workspace = true, features = ["seed-derivable"] ,optional = true }
solana-message = { workspace = true, features = ["serde"] }
solana-native-token = { workspace = true }
solana-nonce-account = { workspace = true }
solana-offchain-message = { workspace = true, features = ["verify"], optional = true }
solana-packet = { workspace = true, features = ["bincode", "serde"] }
solana-poh-config = { workspace = true, features = ["serde"] }
solana-precompile-error = { workspace = true, optional = true }
solana-precompiles = { workspace = true, optional = true }
solana-presigner = { workspace = true, optional = true }
solana-program = { workspace = true, default-features = false }
solana-program-memory = { workspace = true }
solana-pubkey = { workspace = true, features = ["std"], default-features = false }
solana-quic-definitions = { workspace = true, optional = true }
solana-rent-collector = { workspace = true, features = ["serde"], optional = true }
solana-rent-debits = { workspace = true }
solana-reserved-account-keys = { workspace = true, default-features = false }
solana-reward-info = { workspace = true, features = ["serde"] }
solana-sanitize = { workspace = true }
solana-sdk-ids = { workspace = true }
solana-sdk-macro = { workspace = true }
solana-secp256k1-program = { workspace = true, features = ["bincode"], optional = true }
solana-secp256k1-recover = { workspace = true }
solana-secp256r1-program = { workspace = true, default-features = false }
solana-seed-derivable = { workspace = true, optional = true }
solana-seed-phrase = { workspace = true, optional = true }
solana-serde = { workspace = true }
solana-serde-varint = { workspace = true }
solana-short-vec = { workspace = true }
solana-shred-version = { workspace = true, optional = true }
solana-signature= { workspace = true, features = ["rand", "serde", "std", "verify"],optional = true, default-features = false }
solana-signer = { workspace = true, optional = true }
solana-system-transaction = { workspace = true, optional = true }
solana-time-utils = { workspace = true }
solana-transaction = { workspace = true, features = ["blake3","precompiles", "serde","verify"],optional = true }
solana-transaction-context = { workspace = true, features = ["bincode"] }
solana-transaction-error = { workspace = true, features = ["serde"], optional = true }
solana-validator-exit = { workspace = true }
thiserror = { workspace = true }

[dev-dependencies]
curve25519-dalek = { workspace = true, features = ["digest","rand_core"] }
ed25519-dalek = { workspace = true }
libsecp256k1 = { workspace = true, features = ["std","static-context", "hmac"], default-features = false }
openssl = { workspace = true }
rand0-7 = { workspace = true, package = "rand" }
serde_derive = { workspace = true }
serde_with = { workspace = true, features = ["macros"], default-features = false }
solana-instructions-sysvar = { workspace = true, features = ["dev-context-only-utils"] }
solana-program = { workspace = true, features = ["dev-context-only-utils"], default-features = false }

[features]
borsh = [
    "solana-compute-budget-interface/borsh",
    "solana-program/borsh",
    "solana-secp256k1-recover/borsh",
]
default = [
    "borsh",
    "full",
]
dev-context-only-utils = [
    "solana-account/dev-context-only-utils",
    "solana-compute-budget-interface/dev-context-only-utils",
    "solana-rent-debits/dev-context-only-utils",
    "solana-transaction/dev-context-only-utils",
    "solana-transaction-context/dev-context-only-utils",
]
frozen-abi = [
    "solana-feature-set/frozen-abi",
    "solana-fee-structure/frozen-abi",
    "solana-account/frozen-abi",
    "solana-cluster-type/frozen-abi",
    "solana-genesis-config/frozen-abi",
    "solana-hard-forks/frozen-abi",
    "solana-inflation/frozen-abi",
    "solana-packet/frozen-abi",
    "solana-poh-config/frozen-abi",
    "solana-program/frozen-abi",
    "solana-rent-collector/frozen-abi",
    "solana-reward-info/frozen-abi",
    "solana-short-vec/frozen-abi",
    "solana-signature/frozen-abi",
    "solana-transaction/frozen-abi",
    "solana-transaction-error/frozen-abi",
]
full = [
    "serde_json",
    "solana-signature",
    "solana-transaction-context/debug-signature",
    "solana-pubkey/rand",
    "dep:solana-client-traits",
    "dep:solana-cluster-type",
    "dep:solana-ed25519-program",
    "dep:solana-commitment-config",
    "dep:solana-compute-budget-interface",
    "dep:solana-genesis-config",
    "dep:solana-hard-forks",
    "dep:solana-keypair",
    "dep:solana-offchain-message",
    "dep:solana-precompile-error",
    "dep:solana-precompiles",
    "dep:solana-presigner",
    "dep:solana-quic-definitions",
    "dep:solana-rent-collector",
    "dep:solana-secp256k1-program",
    "dep:solana-seed-derivable",
    "dep:solana-seed-phrase",
    "dep:solana-shred-version",
    "dep:solana-signer",
    "dep:solana-system-transaction",
    "dep:solana-transaction",
    "dep:solana-transaction-error",
]
openssl-vendored = ["solana-precompiles/openssl-vendored"]
program = []

[target.'cfg(target_arch = "wasm32")'.dependencies.getrandom]
version = "0.1"
features = ["wasm-bindgen"]

[target.'cfg(target_arch = "wasm32")'.dependencies.js-sys]
version = "0.3.77"

[target.'cfg(target_arch = "wasm32")'.dependencies.wasm-bindgen]
version = "0.2"

[lints.rust.unexpected_cfgs]
level = "warn"
priority = 0
check-cfg = [
    'cfg(target_os, values("solana"))',
    'cfg(feature, values("frozen-abi", "no-entrypoint"))',
]
