[package]
name = "solana-transaction-context"
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg=docsrs"]
targets = ["x86_64-unknown-linux-gnu"]

[lib]
name = "solana_transaction_context"
path = "src/lib.rs"

[dependencies]
serde = { workspace = true, optional = true }
serde_derive = { workspace = true, optional = true }
solana-account = { workspace = true }
solana-instruction = { workspace = true,features = ["std"], default-features = false }
solana-pubkey = { workspace = true, default-features = false }

[dev-dependencies]
solana-account-info = { workspace = true }
solana-system-interface = { workspace = true }
static_assertions = { workspace = true }

[features]
bincode = [
    "dep:bincode",
    "serde",
    "solana-account/bincode",
]
debug-signature = ["dep:solana-signature"]
dev-context-only-utils = [
    "bincode",
    "debug-signature",
    "solana-account/dev-context-only-utils",
]
serde = [
    "dep:serde",
    "dep:serde_derive",
]

[target.'cfg(not(target_os = "solana"))'.dependencies]
bincode = { workspace = true, optional = true }
solana-rent = { workspace = true, default-features = false }
solana-signature = { workspace = true, optional = true ,default-features = false }

[lints.rust.unexpected_cfgs]
level = "warn"
priority = 0
check-cfg = [
    'cfg(target_os, values("solana"))',
    'cfg(feature, values("frozen-abi", "no-entrypoint"))',
]
